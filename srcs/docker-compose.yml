version: '3.7'

networks:
  inception:
    name: inception
    driver: bridge

volumes:
  wordpress:
    name: wp_files
    driver_opts:
      device: /home/aboudoun/data/wp_files
      o: bind
      type: none
  mariadb:
    name: wp_database
    driver_opts:
      device: /home/aboudoun/data/wp_database
      o: bind
      type: none

services:
  mariadb:
    env_file: .env
    build: ./requirements/mariadb
    image: mariadb:1337
    container_name: mariadb
    networks:
      - inception
    volumes:
      - mariadb:/var/lib/mysql
    restart: on-failure

  wordpress:
    env_file: .env
    build: ./requirements/wordpress
    image: wordpress:1337
    container_name: wordpress
    networks:
      - inception
    volumes:
      - wordpress:/var/www/html
    depends_on:
      - mariadb
    restart: on-failure


  nginx:
    env_file: .env
    build: ./requirements/nginx
    image: nginx:1337
    container_name: nginx
    networks:
      - inception
    ports:
      - 443:443
    volumes:
      - wordpress:/var/www/html
    depends_on:
      - wordpress
    restart: on-failure



# Bridge
# It is a private default network created on the host
# Containers linked to this network have an internal IP address through which they communicate with each other easily
# The Docker server (daemon) creates a virtual ethernet bridge docker0 that operates automatically, by delivering packets among various network interfaces
# These are widely used when applications are executed in a standalone container

#----------------------------------------------------------------------------------------------------------
# Docker Compose executes its instructions in the following steps:

# Initialization: Docker Compose reads the configuration file, usually named docker-compose.yml or docker-compose.yaml, and checks if the required images and volumes are available.

# Network creation: If a network is specified in the configuration file, Docker Compose creates the specified network.

# Volume creation: If any volumes are specified in the configuration file, Docker Compose creates the specified volumes.

# Container creation: Docker Compose creates the containers for each service specified in the configuration file. This includes pulling the specified image, if it does not already exist on the host, and creating a container from that image.

# Container start: Docker Compose starts each created container.

# Environment variables: If any environment variables are specified in the configuration file, Docker Compose sets them for each container.

# Port mapping: If any ports are specified in the configuration file, Docker Compose maps them to the host, allowing the containers to be accessible from the host system.

# Dependencies: If any dependencies are specified in the configuration file, Docker Compose starts the dependencies first before starting the dependent services.

# Monitoring: Docker Compose continues to monitor the containers and restarts them if they fail or are stopped.

# These are the basic steps that Docker Compose follows when executing its instructions. The specific implementation details may vary depending on the version of Docker Compose used.
